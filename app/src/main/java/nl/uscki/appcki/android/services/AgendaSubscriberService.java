package nl.uscki.appcki.android.services;

import android.app.IntentService;
import android.content.Intent;
import android.content.Context;
import android.os.Bundle;
import android.support.annotation.NonNull;
import android.support.v4.app.JobIntentService;
import android.util.Log;
import android.widget.Toast;
import com.google.gson.Gson;
import de.greenrobot.event.EventBus;
import nl.uscki.appcki.android.R;
import nl.uscki.appcki.android.api.ServiceGenerator;
import nl.uscki.appcki.android.api.Services;
import nl.uscki.appcki.android.events.AgendaItemSubscribedEvent;
import nl.uscki.appcki.android.generated.ServerError;
import nl.uscki.appcki.android.generated.agenda.AgendaParticipantLists;
import nl.uscki.appcki.android.helpers.PermissionHelper;
import nl.uscki.appcki.android.helpers.UserHelper;
import retrofit2.Call;
import retrofit2.Response;

/**
 * An {@link IntentService} subclass for subscribing users to an agenda event
 */
public class AgendaSubscriberService extends JobIntentService {

    // Must be unique for scheduled jobs, but always used for this class
    public static final int AGENDA_SUBSCRIBE_JOB_ID = 10006;

    // Action names accepted by this service
    public static final String ACTION_SUBSCRIBE_AGENDA
            = "nl.uscki.appcki.android.services.action.SUBSCRIBE_AGENDA";

    // Intent parameters accepted by this service
    public static final String PARAM_AGENDA_ID
            = "nl.uscki.appcki.android.services.extra.PARAM_AGENDA_ID";
    public static final String PARAM_SUBSCRIBE_COMMENT
            = "nl.uscki.appcki.android.services.extra.PARAM_AGENDA_SUBSCRIBE_COMMENT";



    /**
     * Starts this service to perform action subscribe to agenda event action.
     * If the service is already performing a task this action will be queued.
     *
     * @see IntentService
     */
    public static void enqueueSubscribeAction(Context context, int agendaId) {
        Intent intent = new Intent(context, AgendaSubscriberService.class);
        intent.setAction(ACTION_SUBSCRIBE_AGENDA);
        intent.putExtra(PARAM_AGENDA_ID, agendaId);

        // JobIntentService is enqueued in oreo+ devices, but starts using context.startService
        // on pre-Oreo devices
        EventExportService.enqueueWork(context, AgendaSubscriberService.class, AGENDA_SUBSCRIBE_JOB_ID, intent);
    }

    /**
     * Extract the subscribe text from a remote input object, as is generated by the subscribe
     * action in the new agenda item notification
     * @param intent    Intent with which this service was started, if action is subscribe
     * @return          String containing user entered subscribe text
     */
    private CharSequence getSubscribeText(Intent intent) {
        Bundle remoteInput = android.support.v4.app.RemoteInput.getResultsFromIntent(intent);

        if(remoteInput != null) {
            return remoteInput.getCharSequence(PARAM_SUBSCRIBE_COMMENT);
        }

        return "";
    }

    @Override
    protected void onHandleWork(@NonNull Intent intent) {
        final String action = intent.getAction();
        if (ACTION_SUBSCRIBE_AGENDA.equals(action)) {
            final int agendaId = intent.getIntExtra(PARAM_AGENDA_ID, -1);
            final String subscribeComment = getSubscribeText(intent).toString();

            Log.e(this.toString(), "Found agenda id " + agendaId + " and comment '" + subscribeComment + "'");

            handleAgendaSubscribeAction(agendaId, subscribeComment, intent);
        }
    }


    /**
     * Subscribe the active user to an agenda event
     * @param agendaId              ID of the agenda event
     * @param subscribeComment      User entered subscription comment
     * @param intent                Intent with action subscribe, with which this service was started
     */
    private void handleAgendaSubscribeAction(final int agendaId, final String subscribeComment, final Intent intent) {
        if(agendaId < 0) {
            handleError(intent, getString(R.string.content_loading_error));
            return;
        }

        // Make API available
        ServiceGenerator.init();

        // Get token active
        UserHelper.getInstance().load();

        Services.getInstance().agendaService.subscribe(agendaId, subscribeComment)
                .enqueue(new retrofit2.Callback<AgendaParticipantLists>() {

                    @Override
                    public void onResponse(
                            Call<AgendaParticipantLists> call,
                            Response<AgendaParticipantLists> response)
                    {
                        if(response.isSuccessful()) {
                            handleSuccess(response, agendaId, intent);
                        } else {
                            String errorMsg = getString(R.string.connection_error);
                            try {
                                Gson gson = new Gson();
                                ServerError error = gson.fromJson(
                                        response.errorBody().string(), ServerError.class);

                                if(error.getStatus() == 401) {
                                    errorMsg = getString(R.string.notauthorized);
                                } else if(error.getStatus() == 403) {
                                    errorMsg = getString(R.string.notloggedin);
                                } else if(error.getStatus() == 404) {
                                    errorMsg = getString(R.string.content_loading_error);
                                } else if (error.getStatus() == 500) {
                                    errorMsg = getString(R.string.unknown_server_error);
                                }

                            } catch (Exception e) {
                                Log.e(getClass().toString(), e.toString());
                                Toast.makeText(
                                        AgendaSubscriberService.this,
                                        getString(R.string.unknown_server_error),
                                        Toast.LENGTH_SHORT)
                                        .show();
                            }
                            handleError(intent, errorMsg);
                        }
                    }

                    @Override
                    public void onFailure(Call<AgendaParticipantLists> call, Throwable t) {
                        Log.e(getClass().toString(), t.getMessage());
                        handleError(intent, getString(R.string.unknown_server_error));
                    }
                });
    }

    /**
     * On successful subscribe attempt, update the notification and show a toast notification
     * indicating success
     *
     * @param response      Server response for subscribe action
     * @param agendaId      ID of agenda item subscribed to
     * @param intent        Intent with which this service was started
     */
    private void handleSuccess(
            Response<AgendaParticipantLists> response,
            int agendaId,
            Intent intent
    ) {
        EventBus.getDefault()
                .post(new AgendaItemSubscribedEvent(response.body(), false));
        NotificationReceiver notificationReceiver = new NotificationReceiver();

        boolean allowExport = true;

        if(PermissionHelper.canExportCalendarAuto()) {
            allowExport = false;
            EventExportService
                    .enqueueExportAgendaToCalendarAction(this, agendaId);
        }

        notificationReceiver
                .buildNewAgendaItemNotificationFromIntent(intent, allowExport, false);

        Toast.makeText(
                this,
                getString(R.string.agenda_subscribe_success),
                Toast.LENGTH_SHORT)
                .show();
    }

    /**
     * Show a toast notification with an handleError and reset the original notification
     * @param intent    Intent with which this service was started
     * @param error     Error message to show
     */
    private void handleError(Intent intent, String error) {
        NotificationReceiver notificationReceiver = new NotificationReceiver();
        notificationReceiver.buildNewAgendaItemNotificationFromIntent(intent, true, true);
        Toast.makeText(
                this,
                error,
                Toast.LENGTH_SHORT)
                .show();
    }
}
